"use strict";(self.webpackChunkjs_and_ts_in_depth_elective=self.webpackChunkjs_and_ts_in_depth_elective||[]).push([[9323],{8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>c});var r=s(6540);const a={},i=r.createContext(a);function t(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),r.createElement(i.Provider,{value:n},e.children)}},8566:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>t,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"introduction_and_modern_fundamentals/destructuring_arrays_and_objects","title":"Destructuring (arrays y objetos)","description":"El destructuring (o desestructuraci\xf3n) es una forma concisa de extraer valores de arreglos o propiedades de objetos y asignarlos a variables. Introducido en ES6, permite evitar c\xf3digo repetitivo y mejora la claridad, especialmente en funciones, APIs y estructuras anidadas. Es uno de los pilares del JavaScript moderno, junto con arrow functions, spread/rest, y template literals.","source":"@site/docs/01_introduction_and_modern_fundamentals/06_destructuring_arrays_and_objects.md","sourceDirName":"01_introduction_and_modern_fundamentals","slug":"/introduction_and_modern_fundamentals/destructuring_arrays_and_objects","permalink":"/JS_and_TS_In-depth_Elective/en/docs/introduction_and_modern_fundamentals/destructuring_arrays_and_objects","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01_introduction_and_modern_fundamentals/06_destructuring_arrays_and_objects.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Arrow functions y contexto del this","permalink":"/JS_and_TS_In-depth_Elective/en/docs/introduction_and_modern_fundamentals/arrow_functions_and_this_context"},"next":{"title":"Operador spread y rest","permalink":"/JS_and_TS_In-depth_Elective/en/docs/introduction_and_modern_fundamentals/spread_and_rest_operators"}}');var a=s(4848),i=s(8453);const t={sidebar_position:6},c="Destructuring (arrays y objetos)",o={},d=[{value:"\xbfPor qu\xe9 usar destructuring?",id:"por-qu\xe9-usar-destructuring",level:2},{value:"Destructuring de objetos",id:"destructuring-de-objetos",level:2},{value:"Destructuring de arrays",id:"destructuring-de-arrays",level:2},{value:"Destructuring en funciones",id:"destructuring-en-funciones",level:2},{value:"Destructuring anidado",id:"destructuring-anidado",level:2},{value:"Aplicaciones reales",id:"aplicaciones-reales",level:2},{value:"Secuencia de destructuring en objectos anidados",id:"secuencia-de-destructuring-en-objectos-anidados",level:2},{value:"Buenas pr\xe1cticas aplicadas",id:"buenas-pr\xe1cticas-aplicadas",level:2},{value:"Referencias",id:"referencias",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"destructuring-arrays-y-objetos",children:"Destructuring (arrays y objetos)"})}),"\n",(0,a.jsxs)(n.p,{children:["El destructuring (o desestructuraci\xf3n) es una ",(0,a.jsx)(n.strong,{children:"forma concisa de extraer valores"})," de ",(0,a.jsx)(n.strong,{children:"arreglos"})," o ",(0,a.jsx)(n.strong,{children:"propiedades de objetos"})," y asignarlos a variables. Introducido en ES6, permite evitar c\xf3digo repetitivo y mejora la claridad, especialmente en funciones, APIs y estructuras anidadas. Es uno de los pilares del JavaScript moderno, junto con arrow functions, spread/rest, y template literals."]}),"\n",(0,a.jsx)(n.h2,{id:"por-qu\xe9-usar-destructuring",children:"\xbfPor qu\xe9 usar destructuring?"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Reduce l\xedneas de c\xf3digo innecesarias."}),"\n",(0,a.jsx)(n.li,{children:"Mejora la legibilidad de funciones."}),"\n",(0,a.jsx)(n.li,{children:"Permite aplicar default values, renombramiento de variables, y estructuras anidadas de forma elegante."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"destructuring-de-objetos",children:"Destructuring de objetos"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"const user = {\n  id: 1,\n  name: 'Alice',\n  email: 'alice@example.com',\n};\n\n// Forma tradicional:\nconst name = user.name;\n\n// Con destructuring:\nconst { name, email } = user;\n"})}),"\n",(0,a.jsx)(n.p,{children:"Adicional, podemos aplicar destructuring con alias y valores por defecto"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"const { name: userName, phone = 'N/A' } = user;\n\nconsole.log(userName); // 'Alice'\nconsole.log(phone);    // 'N/A'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"destructuring-de-arrays",children:"Destructuring de arrays"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"const numbers = [10, 20, 30];\n\n// Forma tradicional:\nconst first = numbers[0];\n\n// Con destructuring:\nconst [a, b, c] = numbers;\n\nconsole.log(a, b, c); // 10 20 30\n"})}),"\n",(0,a.jsx)(n.p,{children:"Opcionalmente, podemos saltar posiciones y asignar valores por defecto:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"const [x, , z = 99] = [1];\nconsole.log(x); // 1\nconsole.log(z); // 99\n"})}),"\n",(0,a.jsx)(n.h2,{id:"destructuring-en-funciones",children:"Destructuring en funciones"}),"\n",(0,a.jsxs)(n.p,{children:["Al usar destructuring en funciones se ",(0,a.jsx)(n.strong,{children:"mejora la claridad"})," de funciones que reciben objetos complejos."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"function greet({ name }: { name: string }) {\n  console.log(`Hello, ${name}`);\n}\n\nconst user = { name: 'Bob', age: 25 };\ngreet(user); // Hello, Bob\n"})}),"\n",(0,a.jsx)(n.h2,{id:"destructuring-anidado",children:"Destructuring anidado"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"const employee = {\n  id: 101,\n  personal: {\n    name: 'Carol',\n    contact: {\n      email: 'carol@example.com',\n    },\n  },\n};\n\nconst { personal: { contact: { email }, }, } = employee;\n\nconsole.log(email); // 'carol@example.com'\n"})}),"\n",(0,a.jsx)(n.h2,{id:"aplicaciones-reales",children:"Aplicaciones reales"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"APIs REST:"})," Al obtener una respuesta JSON, puedes desestructurar directamente las propiedades necesarias."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Funciones en NestJS/Express:"})," Puedes desestructurar objetos como ",(0,a.jsx)(n.code,{children:"req"}),", ",(0,a.jsx)(n.code,{children:"res"}),", ",(0,a.jsx)(n.code,{children:"body"}),", ",(0,a.jsx)(n.code,{children:"query"}),", etc."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Testing:"})," Librer\xedas como Jest permiten destructuring de objetos con mocks y resultados esperados."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"React:"})," En ",(0,a.jsx)(n.code,{children:"props"}),", el destructuring es una pr\xe1ctica com\xfan y limpia."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"secuencia-de-destructuring-en-objectos-anidados",children:"Secuencia de destructuring en objectos anidados"}),"\n",(0,a.jsx)(n.p,{children:"Este ejemplo simula una llamada a funci\xf3n donde se pasa un objeto complejo, se realiza destructuring dentro de la funci\xf3n y se imprime el resultado."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"function greetUser({ name, contact: { email } }) {\n  console.log(`Hello ${name} (${email})`);\n}\n\nconst user = {\n  name: 'Alice',\n  contact: {\n    email: 'alice@mail.com',\n  },\n};\n\ngreetUser(user);\n"})}),"\n",(0,a.jsx)(n.mermaid,{value:'sequenceDiagram\n    autonumber\n    participant main as Objeto Principal\n    participant func as Funci\xf3n con destructuring\n    participant console as Consola\n\n    main->>main: Crea user\n    main->>func: Llama greetUser(user)\n    activate func\n    func->>func: Extrae {name, contact.email}\n    func--\x3e>console: Muestra: "Hello Alice (alice@mail.com)"\n    deactivate func'}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["El objeto ",(0,a.jsx)(n.code,{children:"user"})," es creado en ",(0,a.jsx)(n.code,{children:"main"}),", con estructura anidada."]}),"\n",(0,a.jsxs)(n.li,{children:["La funci\xf3n ",(0,a.jsx)(n.code,{children:"greetUser"})," es llamada con ",(0,a.jsx)(n.code,{children:"user"})," como argumento."]}),"\n",(0,a.jsxs)(n.li,{children:["Dentro de ",(0,a.jsx)(n.code,{children:"greetUser"}),", se realiza destructuring anidado:","\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"name"})," se extrae directamente."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"email"})," se extrae desde ",(0,a.jsx)(n.code,{children:"contact.email"}),"."]}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.li,{children:"Se imprime en consola un saludo que combina ambos datos."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"buenas-pr\xe1cticas-aplicadas",children:"Buenas pr\xe1cticas aplicadas"}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{children:"Principio"}),(0,a.jsx)(n.th,{children:"Aplicaci\xf3n"})]})}),(0,a.jsxs)(n.tbody,{children:[(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Clean Code"})}),(0,a.jsx)(n.td,{children:"C\xf3digo m\xe1s expresivo y conciso, evita repeticiones."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"SRP (SOLID)"})}),(0,a.jsx)(n.td,{children:"Permite funciones m\xe1s simples al extraer solo lo necesario."})]}),(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{children:(0,a.jsx)(n.strong,{children:"Clean Architecture"})}),(0,a.jsx)(n.td,{children:"Extraer \xfanicamente datos relevantes favorece independencia entre capas."})]})]})]}),"\n",(0,a.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Flanagan, D. (2020). JavaScript: The Definitive Guide (7th ed.). O'Reilly Media."}),"\n",(0,a.jsxs)(n.li,{children:["Mozilla Developer Network (MDN). (s.f.). ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment",children:"Destructuring assignment"})]}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://www.typescriptlang.org/docs",children:"TypeScript Handbook"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://google.github.io/styleguide/jsguide.html",children:"JavaScript Style Guide"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);