"use strict";(self.webpackChunkjs_and_ts_in_depth_elective=self.webpackChunkjs_and_ts_in_depth_elective||[]).push([[7394],{1470:(e,n,r)=>{r.d(n,{A:()=>w});var s=r(6540),a=r(4164),i=r(3104),t=r(6347),o=r(205),d=r(7485),l=r(1682),c=r(679);function u(e){return s.Children.toArray(e).filter(e=>"\n"!==e).map(e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,s.useMemo)(()=>{const e=n??function(e){return u(e).map(({props:{value:e,label:n,attributes:r,default:s}})=>({value:e,label:n,attributes:r,default:s}))}(r);return function(e){const n=(0,l.XI)(e,(e,n)=>e.value===n.value);if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map(e=>e.value).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e},[n,r])}function h({value:e,tabValues:n}){return n.some(n=>n.value===e)}function m({queryString:e=!1,groupId:n}){const r=(0,t.W6)(),a=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,d.aZ)(a),(0,s.useCallback)(e=>{if(!a)return;const n=new URLSearchParams(r.location.search);n.set(a,e),r.replace({...r.location,search:n.toString()})},[a,r])]}function x(e){const{defaultValue:n,queryString:r=!1,groupId:a}=e,i=p(e),[t,d]=(0,s.useState)(()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!h({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map(e=>e.value).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find(e=>e.default)??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:i})),[l,u]=m({queryString:r,groupId:a}),[x,g]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,a]=(0,c.Dv)(n);return[r,(0,s.useCallback)(e=>{n&&a.set(e)},[n,a])]}({groupId:a}),f=(()=>{const e=l??x;return h({value:e,tabValues:i})?e:null})();(0,o.A)(()=>{f&&d(f)},[f]);return{selectedValue:t,selectValue:(0,s.useCallback)(e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);d(e),u(e),g(e)},[u,g,i]),tabValues:i}}var g=r(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var j=r(4848);function y({className:e,block:n,selectedValue:r,selectValue:s,tabValues:t}){const o=[],{blockElementScrollPositionUntilNextRender:d}=(0,i.a_)(),l=e=>{const n=e.currentTarget,a=o.indexOf(n),i=t[a].value;i!==r&&(d(n),s(i))},c=e=>{let n=null;switch(e.key){case"Enter":l(e);break;case"ArrowRight":{const r=o.indexOf(e.currentTarget)+1;n=o[r]??o[0];break}case"ArrowLeft":{const r=o.indexOf(e.currentTarget)-1;n=o[r]??o[o.length-1];break}}n?.focus()};return(0,j.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.A)("tabs",{"tabs--block":n},e),children:t.map(({value:e,label:n,attributes:s})=>(0,j.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{o.push(e)},onKeyDown:c,onClick:l,...s,className:(0,a.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":r===e}),children:n??e},e))})}function v({lazy:e,children:n,selectedValue:r}){const i=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=i.find(e=>e.props.value===r);return e?(0,s.cloneElement)(e,{className:(0,a.A)("margin-top--md",e.props.className)}):null}return(0,j.jsx)("div",{className:"margin-top--md",children:i.map((e,n)=>(0,s.cloneElement)(e,{key:n,hidden:e.props.value!==r}))})}function b(e){const n=x(e);return(0,j.jsxs)("div",{className:(0,a.A)("tabs-container",f.tabList),children:[(0,j.jsx)(y,{...n,...e}),(0,j.jsx)(v,{...n,...e})]})}function w(e){const n=(0,g.A)();return(0,j.jsx)(b,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>o});var s=r(6540);const a={},i=s.createContext(a);function t(e){const n=s.useContext(i);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:t(e.components),s.createElement(i.Provider,{value:n},e.children)}},9365:(e,n,r)=>{r.d(n,{A:()=>t});r(6540);var s=r(4164);const a={tabItem:"tabItem_Ymn6"};var i=r(4848);function t({children:e,hidden:n,className:r}){return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(a.tabItem,r),hidden:n,children:e})}},9867:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"typescript_fundamentals/narrowing_and_type_guards","title":"Narrowing y type guards","description":"Narrowing (refinamiento) es el proceso por el cual TypeScript reduce un tipo amplio (por ejemplo, una uni\xf3n) a un tipo m\xe1s espec\xedfico bas\xe1ndose en comprobaciones de tiempo de ejecuci\xf3n: typeof, instanceof, checks de igualdad, verificaci\xf3n de propiedades (in), an\xe1lisis de verdad (truthiness), y type guards definidos por el usuario.","source":"@site/docs/02_typescript_fundamentals/09_narrowing_and_type_guards.md","sourceDirName":"02_typescript_fundamentals","slug":"/typescript_fundamentals/narrowing_and_type_guards","permalink":"/JS_and_TS_In-depth_Elective/en/docs/typescript_fundamentals/narrowing_and_type_guards","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_typescript_fundamentals/09_narrowing_and_type_guards.md","tags":[],"version":"current","sidebarPosition":9,"frontMatter":{"sidebar_position":9},"sidebar":"tutorialSidebar","previous":{"title":"Tipos literales y enums","permalink":"/JS_and_TS_In-depth_Elective/en/docs/typescript_fundamentals/literal_types_and_enums"},"next":{"title":"Type alias y interfaces extendidas","permalink":"/JS_and_TS_In-depth_Elective/en/docs/typescript_fundamentals/type_aliases_and_extended_interfaces"}}');var a=r(4848),i=r(8453),t=r(1470),o=r(9365);const d={sidebar_position:9},l="Narrowing y type guards",c={},u=[{value:"T\xe9cnicas de narrowing integradas",id:"t\xe9cnicas-de-narrowing-integradas",level:2},{value:"Type Guards definidos por el usuario",id:"type-guards-definidos-por-el-usuario",level:2},{value:"Guard gen\xe9rico para propiedades",id:"guard-gen\xe9rico-para-propiedades",level:3},{value:"Assertion functions (con y sin predicado)",id:"assertion-functions-con-y-sin-predicado",level:2},{value:"Ejemplo T\xe9cnico: Narrowing en controladores (Clean Architecture, sin <code>any</code>)",id:"ejemplo-t\xe9cnico-narrowing-en-controladores-clean-architecture-sin-any",level:2},{value:"Exhaustividad con <code>never</code> (seguridad en refactors)",id:"exhaustividad-con-never-seguridad-en-refactors",level:2},{value:"<code>satisfies</code> para validar tablas y mantener literales",id:"satisfies-para-validar-tablas-y-mantener-literales",level:2},{value:"Validaci\xf3n en la frontera HTTP",id:"validaci\xf3n-en-la-frontera-http",level:2},{value:"Principios recomendados",id:"principios-recomendados",level:2},{value:"Referencias",id:"referencias",level:2}];function p(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"narrowing-y-type-guards",children:"Narrowing y type guards"})}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Narrowing"})," (refinamiento) es el proceso por el cual TypeScript ",(0,a.jsx)(n.strong,{children:"reduce"})," un tipo amplio (por ejemplo, una uni\xf3n) a un tipo m\xe1s espec\xedfico bas\xe1ndose en ",(0,a.jsx)(n.strong,{children:"comprobaciones de tiempo de ejecuci\xf3n"}),": ",(0,a.jsx)(n.code,{children:"typeof"}),", ",(0,a.jsx)(n.code,{children:"instanceof"}),", checks de igualdad, verificaci\xf3n de propiedades (",(0,a.jsx)(n.code,{children:"in"}),"), an\xe1lisis de verdad (truthiness), y ",(0,a.jsx)(n.strong,{children:"type guards"})," definidos por el usuario."]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Meta:"})," evitar ",(0,a.jsx)(n.code,{children:"as"})," y ",(0,a.jsx)(n.code,{children:"any"}),". En su lugar, ",(0,a.jsx)(n.strong,{children:"demuestra"})," al compilador qu\xe9 tipo es realmente en cada rama de control."]}),"\n",(0,a.jsx)(n.h2,{id:"t\xe9cnicas-de-narrowing-integradas",children:"T\xe9cnicas de narrowing integradas"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"typeof"})," (primitivos):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'function formatId(id: string | number) {\n  return typeof id === "number" ? `#${id}` : id.toUpperCase();\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"instanceof"})," (clases/constructores)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"function toIso(x: Date | string) {\n  return x instanceof Date ? x.toISOString() : new Date(x).toISOString();\n}\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.code,{children:"in"})," (propiedad en objeto)"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'type Dog = { kind: "dog"; bark: () => void };\ntype Cat = { kind: "cat"; meow: () => void };\n\nfunction speak(pet: Dog | Cat) {\n  if ("bark" in pet) pet.bark(); else pet.meow();\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Truthiness / nullish"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'function display(title?: string | null) {\n  return title ?? "(no title)"; // respeta "" como v\xe1lido\n}\n'})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Igualdad estricta y discriminantes"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'type Payment =\n  | { kind: "card"; last4: string }\n  | { kind: "cash"; change: number };\n\nfunction render(p: Payment) {\n  if (p.kind === "card") return `Card \u2022\u2022\u2022\u2022 ${p.last4}`;\n  return `Cash (change: ${p.change})`;\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"type-guards-definidos-por-el-usuario",children:"Type Guards definidos por el usuario"}),"\n",(0,a.jsxs)(n.p,{children:["Un ",(0,a.jsx)(n.strong,{children:"type guard"})," es una funci\xf3n cuyo retorno es un ",(0,a.jsx)(n.strong,{children:"predicado de tipo"})," (",(0,a.jsx)(n.code,{children:"x is T"}),"). Permite a TS refinar el tipo fuera de la funci\xf3n."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'type User = { id: string; name: string };\n\nfunction isUser(x: unknown): x is User {\n  return !!x\n    && typeof x === "object"\n    && typeof (x as any).id === "string"\n    && typeof (x as any).name === "string";\n}\n\nfunction greet(x: unknown) {\n  if (isUser(x)) {\n    // x es User aqu\xed\n    return `Hello, ${x.name}`;\n  }\n  return "Hello, guest";\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"guard-gen\xe9rico-para-propiedades",children:"Guard gen\xe9rico para propiedades"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'function hasProp<K extends PropertyKey>(\n  obj: unknown, key: K\n): obj is Record<K, unknown> {\n  return !!obj && typeof obj === "object" && key in (obj as object);\n}\n\nfunction pickId(x: unknown) {\n  if (hasProp(x, "id") && typeof x.id === "string") return x.id;\n  throw new Error("Missing string id");\n}\n'})}),"\n",(0,a.jsx)(n.h2,{id:"assertion-functions-con-y-sin-predicado",children:"Assertion functions (con y sin predicado)"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"asserts condition"}),": Si no se cumple, lanza; si se cumple, el flujo contin\xfaa."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"asserts x is T"}),": adem\xe1s, refina el tipo de ",(0,a.jsx)(n.code,{children:"x"})]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'/** Throws si la condici\xf3n es falsy. */\nfunction assert(condition: unknown, msg = "Assertion failed"): asserts condition {\n  if (!condition) throw new Error(msg);\n}\n\n/** Validador Runtime que rei que se limita el \xe9xito. */\nfunction assertIsOrder(x: unknown): asserts x is { id: string; total: number } {\n  assert(!!x && typeof x === "object", "Not an object");\n  assert(typeof (x as any).id === "string", "id must be string");\n  assert(typeof (x as any).total === "number", "total must be number");\n}\n\nasync function handle(input: unknown) {\n  assertIsOrder(input);   // a partir de aqu\xed, input es {id:string; total:number}\n  return `Order ${input.id} total=${input.total}`;\n}\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"ejemplo-t\xe9cnico-narrowing-en-controladores-clean-architecture-sin-any",children:["Ejemplo T\xe9cnico: Narrowing en controladores (Clean Architecture, sin ",(0,a.jsx)(n.code,{children:"any"}),")"]}),"\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Contexto:"})," endpoint Express que recibe JSON desconocido, valida y delega al caso de uso."]}),"\n","\n",(0,a.jsxs)(t.A,{children:[(0,a.jsx)(o.A,{value:"diagram",label:"Diagrama de Clases",children:(0,a.jsx)(n.mermaid,{value:'classDiagram\n  %% Dominio\n  class Order {\n    +string id\n    +number total\n    +OrderStatus status\n  }\n  class OrderStatus {\n    <<type>>\n    "PENDING"\n    "PAID"\n    "CANCELLED"\n  }\n\n  %% Aplicaci\xf3n\n  class OrderRepo {\n    <<interface>>\n    +findById(id: string): Promise<Order | null>\n    +save(o: Order): Promise<void>\n  }\n\n  class PayOrder {\n    -repo: OrderRepo\n    +execute(orderId: string): Promise<Order>\n  }\n\n  %% Interfaz\n  class payOrderHandler {\n    <<function>>\n    +payOrderHandler(req: Request, res: Response): Promise<Response>\n  }\n\n  %% Relaciones\n  OrderStatus --\x3e Order : uses\n  OrderRepo --\x3e Order : uses\n  PayOrder --\x3e OrderRepo : depends on\n  PayOrder --\x3e Order : returns\n  payOrderHandler --\x3e PayOrder : uses\n  payOrderHandler --\x3e Order : returns'})}),(0,a.jsx)(o.A,{value:"domain",label:"Dominio",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:'showLineNumbers title="domain/entities/Order.ts"',children:'export type OrderStatus = "PENDING" | "PAID" | "CANCELLED";\nexport interface Order { id: string; total: number; status: OrderStatus }\n'})})}),(0,a.jsx)(o.A,{value:"application",label:"Aplicaci\xf3n",children:(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:'showLineNumbers title="application/usecases/PayOrder.ts"',children:'export interface OrderRepo {\n  findById(id: string): Promise<Order | null>;\n  save(o: Order): Promise<void>;\n}\n\nexport class PayOrder {\n  constructor(private readonly repo: OrderRepo) {}\n\n  async execute(orderId: string): Promise<Order> {\n    const o = await this.repo.findById(orderId);\n    if (!o) throw new Error("Order not found");\n    if (o.status !== "PENDING") throw new Error("Invalid state");\n    const updated: Order = { ...o, status: "PAID" };\n    await this.repo.save(updated);\n    return updated;\n  }\n}\n'})})}),(0,a.jsxs)(o.A,{value:"interface",label:"Interface",children:[(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:'showLineNumbers title="interface/http/guards.ts"',children:'import type { Request, Response } from "express";\n\nfunction isIdParams(x: unknown): x is { id: string } {\n  return !!x && typeof (x as any).id === "string";\n}\n\nexport async function payOrderHandler(req: Request, res: Response) {\n  try {\n    if (!isIdParams(req.params)) {\n      return res.status(400).json({ error: "Missing id param" });\n    }\n    const order = await useCases.payOrder.execute(req.params.id);\n    return res.status(200).json(order);\n  } catch (e) {\n    const msg = e instanceof Error ? e.message : "Unknown error";\n    return res.status(400).json({ error: msg });\n  }\n}\n'})}),(0,a.jsx)(n.p,{children:"Observaciones:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Borde de la app"})," (",(0,a.jsx)(n.code,{children:"req.params"}),") tratado como ",(0,a.jsx)(n.code,{children:"unknown"})," y refinado con guards."]}),"\n",(0,a.jsxs)(n.li,{children:["En ",(0,a.jsx)(n.code,{children:"catch"}),", ",(0,a.jsx)(n.strong,{children:"narrowing del error"}),": ",(0,a.jsx)(n.code,{children:"e instanceof Error"})," (desde TS 4.4 ",(0,a.jsx)(n.code,{children:"catch"})," es ",(0,a.jsx)(n.code,{children:"unknown"})," por defecto)."]}),"\n"]})]})]}),"\n",(0,a.jsxs)(n.h2,{id:"exhaustividad-con-never-seguridad-en-refactors",children:["Exhaustividad con ",(0,a.jsx)(n.code,{children:"never"})," (seguridad en refactors)"]}),"\n",(0,a.jsxs)(n.p,{children:["La ",(0,a.jsxs)(n.strong,{children:["exhaustividad con ",(0,a.jsx)(n.code,{children:"never"})]})," es una t\xe9cnica en TS que permite garantizar que ",(0,a.jsx)(n.strong,{children:"todas las variantes de un tipo discriminado"})," est\xe9n siendo correctamente manejadas en tu c\xf3digo. Es muy \xfatil cuando se trabaja con uniones de tipos, y necesitas que el compilador te avise si olvidas cubrir alg\xfan caso, por ejemplo, al hacer un ",(0,a.jsx)(n.code,{children:"switch"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'type Result =\n  | { kind: "ok"; value: number }\n  | { kind: "err"; message: string };\n\nfunction handle(res: Result) {\n  switch (res.kind) {\n    case "ok":  return res.value;\n    case "err": return res.message;\n    default: {\n      const _exhaustive: never = res; // si aparece nueva variante, el compilador falla\n      return _exhaustive;\n    }\n  }\n}\n'})}),"\n",(0,a.jsxs)(n.h2,{id:"satisfies-para-validar-tablas-y-mantener-literales",children:[(0,a.jsx)(n.code,{children:"satisfies"})," para validar tablas y mantener literales"]}),"\n",(0,a.jsxs)(n.p,{children:["El operador ",(0,a.jsx)(n.code,{children:"satisfies"})," verifica que un valor cumpla con un tipo, pero sin forzar el valor de adoptar ese tipo."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:'const STATUS_LABELS = {\n  PENDING: "Pending",\n  PAID: "Paid",\n  CANCELLED: "Cancelled",\n} as const satisfies Record<"PENDING" | "PAID" | "CANCELLED", string>;\n'})}),"\n",(0,a.jsx)(n.p,{children:"Beneficios:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Garantiza que el objeto cumpla el contrato sin ensanchar sus literales."}),"\n",(0,a.jsx)(n.li,{children:"Evita errores silenciosos al modificar claves."}),"\n",(0,a.jsx)(n.li,{children:"Preserva los literales para usar en validaciones, comparaciones o tipado estricto."}),"\n",(0,a.jsx)(n.li,{children:"Ideal para CLI, enums, mapeos de estados, etc."}),"\n",(0,a.jsx)(n.li,{children:"Compatible con Clean Architecture, donde los contratos deben ser expl\xedcitos y seguros."}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"validaci\xf3n-en-la-frontera-http",children:"Validaci\xf3n en la frontera HTTP"}),"\n",(0,a.jsx)(n.mermaid,{value:"sequenceDiagram\n  autonumber\n  participant Client\n  participant Controller\n  participant Guard as Type Guards\n  participant UseCase\n\n  Client->>Controller: POST /orders/:id\n  Controller->>Guard: validate req.params (unknown)\n  Guard--\x3e>Controller: params is { id: string }\n  Controller->>UseCase: execute(id)\n  UseCase--\x3e>Controller: Order\n  Controller--\x3e>Client: 200 OK (Order)"}),"\n",(0,a.jsx)(n.h2,{id:"principios-recomendados",children:"Principios recomendados"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clean Code:"})," evita ",(0,a.jsx)(n.code,{children:"any"}),"/",(0,a.jsx)(n.code,{children:"as"}),"; usa guards claros y reusables; nombra los discriminantes (",(0,a.jsx)(n.code,{children:"kind"}),", ",(0,a.jsx)(n.code,{children:"type"}),") y funciones (",(0,a.jsx)(n.code,{children:"isUser"}),", ",(0,a.jsx)(n.code,{children:"assertIsOrder"}),")."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"SRP (S):"})," cada guard ",(0,a.jsx)(n.strong,{children:"valida una cosa"}),"; assert separa validaci\xf3n de negocio de transporte."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"OCP (O):"})," ",(0,a.jsx)(n.strong,{children:"uniones discriminadas"})," + ",(0,a.jsx)(n.code,{children:"never"})," fuerzan exhaustividad al a\xf1adir variantes."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"DIP (D):"})," los casos de uso dependen de ",(0,a.jsx)(n.strong,{children:"contratos"}),"; los guards viven en la capa de ",(0,a.jsx)(n.strong,{children:"interfaces"}),", cerca de la frontera."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Clean Architecture:"})," ",(0,a.jsxs)(n.strong,{children:["dominio sin ",(0,a.jsx)(n.code,{children:"any"})]}),"; ",(0,a.jsx)(n.strong,{children:"interfaces"})," refinan ",(0,a.jsx)(n.code,{children:"unknown"})," \u2192 tipos del dominio antes de orquestar."]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["Microsoft. (s.f.). ",(0,a.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/",children:"TypeScript Handbook: Narrowing, Type Guards, Assertion Functions"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Vanderkam, D. (2019). Effective TypeScript: 62 Specific Ways to Improve Your TypeScript. O\u2019Reilly Media."}),"\n",(0,a.jsx)(n.li,{children:"Flanagan, D. (2020). JavaScript: The Definitive Guide (7.\xaa ed.). O\u2019Reilly Media."}),"\n",(0,a.jsxs)(n.li,{children:["Mozilla Developer Network. (s.f.). ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/",children:"typeof, instanceof, and property checks"}),"."]}),"\n",(0,a.jsx)(n.li,{children:"Zakas, N. C. (2012). Maintainable JavaScript: Writing Readable Code. O\u2019Reilly Media."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);