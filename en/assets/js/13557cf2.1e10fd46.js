"use strict";(self.webpackChunkjs_and_ts_in_depth_elective=self.webpackChunkjs_and_ts_in_depth_elective||[]).push([[1591],{8055:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"advanced_concepts/fetch_api_getpost_requests_and_response_handling","title":"Fetch API: peticiones GET, POST y manejo de respuestas","description":"La Fetch API es una interfaz nativa de JavaScript que permite realizar solicitudes HTTP asincr\xf3nicas. Est\xe1 basada en Promises, lo que la hace m\xe1s moderna y legible que APIs como XMLHttpRequest. Permite recuperar datos desde un servidor o enviar informaci\xf3n sin necesidad de recargar la p\xe1gina.","source":"@site/docs/03_advanced_concepts/05_fetch_api_getpost_requests_and_response_handling.md","sourceDirName":"03_advanced_concepts","slug":"/advanced_concepts/fetch_api_getpost_requests_and_response_handling","permalink":"/JS_and_TS_In-depth_Elective/en/docs/advanced_concepts/fetch_api_getpost_requests_and_response_handling","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/03_advanced_concepts/05_fetch_api_getpost_requests_and_response_handling.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"async/await y control de errores","permalink":"/JS_and_TS_In-depth_Elective/en/docs/advanced_concepts/asyncawait_and_error_handling"},"next":{"title":"Manejo avanzado de errores con try/catch","permalink":"/JS_and_TS_In-depth_Elective/en/docs/advanced_concepts/advanced_error_handling_with_trycatch"}}');var a=s(4848),i=s(8453);const o={sidebar_position:5},t="Fetch API: peticiones GET, POST y manejo de respuestas",c={},l=[{value:"Sintaxis b\xe1sica",id:"sintaxis-b\xe1sica",level:2},{value:"Ejemplo de petici\xf3n GET b\xe1sico",id:"ejemplo-de-petici\xf3n-get-b\xe1sico",level:2},{value:"Verbos principales en peticiones HTTP",id:"verbos-principales-en-peticiones-http",level:2},{value:"GET",id:"get",level:3},{value:"POST",id:"post",level:3},{value:"DELETE",id:"delete",level:3},{value:"PUT",id:"put",level:3},{value:"PATCH",id:"patch",level:3},{value:"Otros m\xe9todos",id:"otros-m\xe9todos",level:3},{value:"Manejo de respuestas",id:"manejo-de-respuestas",level:2},{value:"Fetch con async/await",id:"fetch-con-asyncawait",level:2},{value:"Buenas pr\xe1cticas con Fetch",id:"buenas-pr\xe1cticas-con-fetch",level:2},{value:"Ejemplo t\xe9cnico",id:"ejemplo-t\xe9cnico",level:2},{value:"Referencias",id:"referencias",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"fetch-api-peticiones-get-post-y-manejo-de-respuestas",children:"Fetch API: peticiones GET, POST y manejo de respuestas"})}),"\n",(0,a.jsxs)(n.p,{children:["La ",(0,a.jsx)(n.strong,{children:"Fetch API"})," es una interfaz nativa de JavaScript que permite realizar solicitudes HTTP asincr\xf3nicas. Est\xe1 basada en ",(0,a.jsx)(n.strong,{children:"Promises"}),", lo que la hace m\xe1s moderna y legible que APIs como ",(0,a.jsx)(n.code,{children:"XMLHttpRequest"}),". Permite recuperar datos desde un servidor o enviar informaci\xf3n sin necesidad de recargar la p\xe1gina."]}),"\n",(0,a.jsx)(n.h2,{id:"sintaxis-b\xe1sica",children:"Sintaxis b\xe1sica"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"fetch(url, opciones?)\n  .then((respuesta) => {\n    // Manejo de respuesta\n  })\n  .catch((error) => {\n    // Manejo de error\n  });\n"})}),"\n",(0,a.jsx)(n.h2,{id:"ejemplo-de-petici\xf3n-get-b\xe1sico",children:"Ejemplo de petici\xf3n GET b\xe1sico"}),"\n",(0,a.jsxs)(n.p,{children:["Usando ",(0,a.jsx)(n.strong,{children:"Promise Chaining"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"fetch('https://api.example.com/users')\n  .then((res) => res.json()) // Convertir respuesta en JSON\n  .then((data) => console.log(data))\n  .catch((err) => console.error('Error:', err));\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Usando ",(0,a.jsx)(n.strong,{children:"async/await"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"async function getUsers() {\n  try {\n    const res = await fetch('https://api.example.com/users');\n    if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);\n    const data = await res.json();\n    console.log(data);\n  } catch (err) {\n    console.error('Error en la petici\xf3n:', err);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"verbos-principales-en-peticiones-http",children:"Verbos principales en peticiones HTTP"}),"\n",(0,a.jsx)(n.h3,{id:"get",children:"GET"}),"\n",(0,a.jsx)(n.p,{children:"El m\xe9todo GET se usa para obtener datos."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"async function getUserById(id: number) {\n  const res = await fetch(`https://api.example.com/users/${id}`);\n  if (!res.ok) throw new Error('No se pudo obtener el usuario');\n  return res.json();\n}\n"})}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"No tiene cuerpo (body)"}),"\n",(0,a.jsxs)(n.li,{children:["Se puede enviar par\xe1metros con ",(0,a.jsx)(n.strong,{children:"query string"})," (",(0,a.jsx)(n.code,{children:"?key=value"}),")"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"post",children:"POST"}),"\n",(0,a.jsx)(n.p,{children:"El m\xe9todo POST se usa para enviar datos (generalmente en formato JSON)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"async function createUser(user: { name: string; email: string }) {\n  const res = await fetch('https://api.example.com/users', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json', // Indicamos que enviamos JSON\n    },\n    body: JSON.stringify(user),\n  });\n\n  if (!res.ok) throw new Error('Error al crear el usuario');\n  return res.json();\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"delete",children:"DELETE"}),"\n",(0,a.jsx)(n.p,{children:"El m\xe9todo DELETE se usa para eliminar recursos."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"async function deleteUser(id: number): Promise<void> {\n  try {\n    const response = await fetch(`https://api.example.com/users/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer tu_token_aqu\xed' // si aplica\n      }\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error al eliminar: ${response.status}`);\n    }\n\n    console.log(`Usuario con ID ${id} eliminado correctamente.`);\n  } catch (error) {\n    console.error('Error en la petici\xf3n DELETE:', error);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"put",children:"PUT"}),"\n",(0,a.jsx)(n.p,{children:"El m\xe9todo PUT se usa para actualizar recursos."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"interface User {\n  id: number;\n  name: string;\n  email: string;\n}\n\nasync function updateUser(user: User): Promise<void> {\n  try {\n    const response = await fetch(`https://api.ejemplo.com/users/${user.id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer tu_token_aqu\xed' // si aplica\n      },\n      body: JSON.stringify({\n        name: user.name,\n        email: user.email\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error al actualizar: ${response.status}`);\n    }\n\n    console.log(`Usuario con ID ${usuario.id} actualizado correctamente.`);\n  } catch (error) {\n    console.error('Error en la petici\xf3n PUT:', error);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"patch",children:"PATCH"}),"\n",(0,a.jsx)(n.p,{children:"El m\xe9todo PATCH se usa para actualizar recursos de manera parcial."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"async function partialUpdateUser(id: number, partialData: Partial<{ name: string; email: string }>): Promise<void> {\n  try {\n    const response = await fetch(`https://api.example.com/users/${id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer tu_token_aqu\xed' // si aplica\n      },\n      body: JSON.stringify(partialData)\n    });\n\n    if (!response.ok) {\n      throw new Error(`Error al actualizar parcialmente: ${response.status}`);\n    }\n\n    console.log(`Usuario con ID ${id} actualizado parcialmente.`);\n  } catch (error) {\n    console.error('Error en la petici\xf3n PATCH:', error);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"otros-m\xe9todos",children:"Otros m\xe9todos"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"HEAD:"})," Igual que ",(0,a.jsx)(n.code,{children:"GET"}),", pero solo devuelve los encabezados (sin cuerpo)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"OPTION:"})," Obtener los m\xe9todos permitidos para un recurso (\xfatil para CORS)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"CONNECT:"})," Establecer un t\xfanel para comunicaci\xf3n segura (usado en proxies HTTPS)."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"TRACE:"})," Realizar una prueba de diagn\xf3stico devolviendo lo que se recibe."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"LINK/UNLINK:"})," Asociar o desasociar recursos (propuestos pero poco usados)"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"manejo-de-respuestas",children:"Manejo de respuestas"}),"\n",(0,a.jsxs)(n.p,{children:["La respuesta (",(0,a.jsx)(n.code,{children:"Response"}),") tiene m\xe9todos para extraer el contenido:"]}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".json()"}),": interpreta como JSON"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".text()"}),": interpreta como texto plano"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".blob()"}),": interpreta como binario (im\xe1genes, PDF)"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".arrayBuffer()"}),": datos en buffer"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:".formData()"}),": datos de formulario"]}),"\n"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"const res = await fetch('/archivo.txt');\nconst contenido = await res.text();\nconsole.log(contenido);\n"})}),"\n",(0,a.jsx)(n.h2,{id:"fetch-con-asyncawait",children:"Fetch con async/await"}),"\n",(0,a.jsx)(n.mermaid,{value:'flowchart TD\n    A(["Inicio"]) --\x3e B["Llamar fetch(url)"]\n    B --\x3e C{\xbfResuelta la Promise?}\n    C -- No --\x3e B\n    C -- S\xed --\x3e D{\xbfres.ok es true?}\n    D -- No --\x3e E["Lanzar error con throw"]\n    D -- S\xed --\x3e F["Extraer datos con .json() / .text()"]\n    F --\x3e G["Procesar datos"]\n    E --\x3e H(["Fin"])\n    G --\x3e H'}),"\n",(0,a.jsx)(n.h2,{id:"buenas-pr\xe1cticas-con-fetch",children:"Buenas pr\xe1cticas con Fetch"}),"\n",(0,a.jsxs)(n.ol,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Manejar errores de red y de HTTP:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"if (!res.ok) throw new Error(`Error HTTP: ${res.status}`);\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Centralizar configuraci\xf3n repetida:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const BASE_URL = '<https://api.example.com>';\n"})}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Encapsular en funciones: mejora la reutilizaci\xf3n y testeo."}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)(n.p,{children:"Cancelar peticiones innecesarias con AbortController (tema que se abordar\xe1 despu\xe9s)."}),"\n"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"ejemplo-t\xe9cnico",children:"Ejemplo t\xe9cnico"}),"\n",(0,a.jsx)(n.p,{children:"Veamos un ejemplo de login con manejo de fetch, control de errores y uso de la respuesta entregada por el servicio HTTP:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"async function login(email: string, password: string) {\n  try {\n    const res = await fetch('https://api.example.com/login', {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ email, password }),\n    });\n\n    if (!res.ok) throw new Error('Credenciales inv\xe1lidas');\n    const { token } = await res.json();\n\n    console.log('Token recibido:', token);\n    return token;\n  } catch (error) {\n    console.error('Error en login:', error);\n  }\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Flanagan, D. (2020). JavaScript: The Definitive Guide (7th ed.). O\u2019Reilly Media."}),"\n",(0,a.jsxs)(n.li,{children:["Mozilla Developer Network. (s.f.). ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",children:"Fetch API"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Mozilla Developer Network. (s.f.). ",(0,a.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/Response",children:"Response"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["TypeScript Handbook. (s.f.). ",(0,a.jsx)(n.a,{href:"https://www.typescriptlang.org/docs",children:"Using Fetch"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:["Google. (s.f.). ",(0,a.jsx)(n.a,{href:"https://google.github.io/styleguide/jsguide.html",children:"JavaScript Style Guide"}),"."]}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var r=s(6540);const a={},i=r.createContext(a);function o(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);