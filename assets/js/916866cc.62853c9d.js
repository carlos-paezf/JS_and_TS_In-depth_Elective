"use strict";(self.webpackChunkjs_and_ts_in_depth_elective=self.webpackChunkjs_and_ts_in_depth_elective||[]).push([[2621],{4794:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"introduction_and_modern_fundamentals/let_const_and_differences_with_var","title":"let, const, y diferencias con var","description":"En JavaScript, existen tres formas principales de declarar variables: var, let y const. Aunque var fue la \xfanica forma original, ES6 (2015) introdujo let y const para solventar varias deficiencias y mejorar la robustez del lenguaje. Entender sus diferencias es crucial para evitar errores silenciosos, mejorar la legibilidad y mantener c\xf3digo seguro y predecible.","source":"@site/docs/01_introduction_and_modern_fundamentals/04_let_const_and_differences_with_var.md","sourceDirName":"01_introduction_and_modern_fundamentals","slug":"/introduction_and_modern_fundamentals/let_const_and_differences_with_var","permalink":"/JS_and_TS_In-depth_Elective/docs/introduction_and_modern_fundamentals/let_const_and_differences_with_var","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/01_introduction_and_modern_fundamentals/04_let_const_and_differences_with_var.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Herramientas y entorno de desarrollo sugerido","permalink":"/JS_and_TS_In-depth_Elective/docs/introduction_and_modern_fundamentals/suggested_tools_and_development_environment"},"next":{"title":"Arrow functions y contexto del this","permalink":"/JS_and_TS_In-depth_Elective/docs/introduction_and_modern_fundamentals/arrow_functions_and_this_context"}}');var r=i(4848),c=i(8453);const a={sidebar_position:4},o="let, const, y diferencias con var",d={},t=[{value:"Diferencias entre var, let y const",id:"diferencias-entre-var-let-y-const",level:2},{value:"Ejemplo en c\xf3digo",id:"ejemplo-en-c\xf3digo",level:2},{value:"Comportamiento de alcance",id:"comportamiento-de-alcance",level:2},{value:"Hoisting y Temporal Dead Zone (TDZ)",id:"hoisting-y-temporal-dead-zone-tdz",level:2},{value:"Casos donde se refleja esta diferencia",id:"casos-donde-se-refleja-esta-diferencia",level:2},{value:"Buenas pr\xe1cticas recomendadas",id:"buenas-pr\xe1cticas-recomendadas",level:2},{value:"Referencias",id:"referencias",level:2}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"let-const-y-diferencias-con-var",children:"let, const, y diferencias con var"})}),"\n",(0,r.jsxs)(n.p,{children:["En JavaScript, existen tres formas principales de declarar variables: ",(0,r.jsx)(n.code,{children:"var"}),", ",(0,r.jsx)(n.code,{children:"let"})," y ",(0,r.jsx)(n.code,{children:"const"}),". Aunque ",(0,r.jsx)(n.code,{children:"var"})," fue la \xfanica forma original, ",(0,r.jsx)(n.strong,{children:"ES6 (2015)"})," introdujo ",(0,r.jsx)(n.code,{children:"let"})," y ",(0,r.jsx)(n.code,{children:"const"})," para solventar varias deficiencias y mejorar la robustez del lenguaje. Entender sus diferencias es crucial para ",(0,r.jsx)(n.strong,{children:"evitar errores silenciosos"}),", mejorar la legibilidad y ",(0,r.jsx)(n.strong,{children:"mantener c\xf3digo seguro y predecible"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"diferencias-entre-var-let-y-const",children:"Diferencias entre var, let y const"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Caracter\xedstica"}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.code,{children:"var"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.code,{children:"let"})}),(0,r.jsx)(n.th,{children:(0,r.jsx)(n.code,{children:"const"})})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"\xc1mbito (scope)"}),(0,r.jsx)(n.td,{children:"Funci\xf3n"}),(0,r.jsx)(n.td,{children:"Bloque"}),(0,r.jsx)(n.td,{children:"Bloque"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Reasignaci\xf3n"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Redeclaraci\xf3n"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u274c"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Hoisting"}),(0,r.jsxs)(n.td,{children:["\u2705 (inicializa como ",(0,r.jsx)(n.code,{children:"undefined"}),")"]}),(0,r.jsx)(n.td,{children:"\u2705 (sin inicializar)"}),(0,r.jsx)(n.td,{children:"\u2705 (sin inicializar)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Temporal Dead Zone (TDZ)"}),(0,r.jsx)(n.td,{children:"\u274c"}),(0,r.jsx)(n.td,{children:"\u2705"}),(0,r.jsx)(n.td,{children:"\u2705"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Uso recomendado"}),(0,r.jsx)(n.td,{children:"\u274c Evitar"}),(0,r.jsx)(n.td,{children:"\u2705 Variables mutables"}),(0,r.jsx)(n.td,{children:"\u2705 Variables inmutables"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"ejemplo-en-c\xf3digo",children:"Ejemplo en c\xf3digo"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="src/interfaces/VariableScopeDemo.js" showLineNumbers',children:'/**\n * Demonstrates the differences between var, let and const.\n */\nexport function demonstrateVariableScopes() {\n  if (true) {\n    var functionScoped = "I\'m accessible outside this block";\n    let blockScoped = "I\'m limited to this block";\n    const immutable = "I\'m also block-scoped and immutable";\n\n    console.log(blockScoped);       // \u2705 OK\n    console.log(immutable);         // \u2705 OK\n  }\n\n  console.log(functionScoped);      // \u2705 OK (var is function-scoped)\n  // console.log(blockScoped);      // \u274c Error\n  // console.log(immutable);        // \u274c Error\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.code,{children:"const"})," por defecto."]}),"\n",(0,r.jsxs)(n.li,{children:["Usa ",(0,r.jsx)(n.code,{children:"let"})," solo si necesitas reasignar el valor."]}),"\n",(0,r.jsxs)(n.li,{children:["Evita ",(0,r.jsx)(n.code,{children:"var"})," completamente."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"comportamiento-de-alcance",children:"Comportamiento de alcance"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"console.log(x);    // \u2705 undefined\n// console.log(y); // \u274c ReferenceError\n// console.log(z); // \u274c ReferenceError\n\nvar x = 5;\nlet y = 10;\nconst z = 15;\n\nconsole.log(x, y, z); // \u2705 5 10 15\n"})}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n    autonumber\n    participant JS_Engine as JS Engine\n    participant Memory as Memory Allocation\n    participant Step1 as Paso 1: Acceso\n    participant Step2 as Paso 2: Declaraci\xf3n\n    participant Step3 as Paso 3: Uso\n\n    %% Fase de compilaci\xf3n\n    Note over JS_Engine,Memory: Fase 1 \u2013 Hoisting\n\n    JS_Engine->>Memory: Reserva espacio para `var x` (inicializa como undefined)\n    JS_Engine->>Memory: Reserva espacio para `let y` (sin inicializar)\n    JS_Engine->>Memory: Reserva espacio para `const z` (sin inicializar)\n\n    %% Fase de ejecuci\xf3n\n    Note over JS_Engine,Step1: Fase 2 \u2013 Ejecuci\xf3n\n\n    Step1->>Memory: Accede a `x`\n    Memory--\x3e>Step1: Devuelve `undefined`\n\n    Step1->>Memory: Accede a `y`\n    Memory--\x3e>Step1: \u274c ReferenceError (TDZ)\n\n    Step1->>Memory: Accede a `z`\n    Memory--\x3e>Step1: \u274c ReferenceError (TDZ)\n\n    Step2->>Memory: Inicializa `x = 5`, `y = 10`, `z = 15`\n\n    Step3->>Memory: Accede y usa variables (todos disponibles)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Fase de compilaci\xf3n (Hoisting):","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"var x"}),": ",(0,r.jsx)(n.strong,{children:"se eleva"})," y se inicializa autom\xe1ticamente con ",(0,r.jsx)(n.code,{children:"undefined"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"let y"})," y ",(0,r.jsx)(n.code,{children:"const z"}),": ",(0,r.jsx)(n.strong,{children:"se elevan"}),", pero ",(0,r.jsx)(n.strong,{children:"no se inicializan"}),", quedando en la ",(0,r.jsx)(n.strong,{children:"Zona Temporal Muerta (TDZ)"}),"."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Fase de ejecuci\xf3n:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Al acceder a ",(0,r.jsx)(n.code,{children:"x"})," antes de su declaraci\xf3n, retorna ",(0,r.jsx)(n.code,{children:"undefined"})," sin error."]}),"\n",(0,r.jsxs)(n.li,{children:["Al acceder a ",(0,r.jsx)(n.code,{children:"y"})," o ",(0,r.jsx)(n.code,{children:"z"})," antes de su inicializaci\xf3n, se lanza un ",(0,r.jsx)(n.code,{children:"ReferenceError"}),".}"]}),"\n",(0,r.jsxs)(n.li,{children:["Una vez declaradas, todas pueden usarse normalmente (salvo que ",(0,r.jsx)(n.code,{children:"const"})," no puede reasignarse)."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"hoisting-y-temporal-dead-zone-tdz",children:"Hoisting y Temporal Dead Zone (TDZ)"}),"\n",(0,r.jsxs)(n.p,{children:["El ",(0,r.jsx)(n.strong,{children:"hoisting"})," es un comportamiento donde las declaraciones de variables y funciones ",(0,r.jsx)(n.strong,{children:'son movidas (o "elevadas") al inicio de su \xe1mbito (scope)'})," antes de la ejecuci\xf3n del c\xf3digo. La ",(0,r.jsx)(n.strong,{children:"Temporal Dead Zone (TDZ)"})," es el per\xedodo dentro del alcance de una variable donde ",(0,r.jsx)(n.strong,{children:"no se puede acceder a ella"}),", generalmente justo antes de su declaraci\xf3n e inicializaci\xf3n."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="src/interfaces/VariableScopeDemo.js" showLineNumbers',children:"function testHoisting() {\n  console.log(x);      // undefined (hoisting con var)\n  var x = 5;\n\n  // console.log(y);   // \u274c ReferenceError (TDZ con let)\n  let y = 10;\n\n  // console.log(z);   // \u274c ReferenceError (TDZ con const)\n  const z = 15;\n}\n\ntestHoisting()\n"})}),"\n",(0,r.jsx)(n.h2,{id:"casos-donde-se-refleja-esta-diferencia",children:"Casos donde se refleja esta diferencia"}),"\n",(0,r.jsxs)(n.p,{children:["Bug real por uso incorrecto de ",(0,r.jsx)(n.code,{children:"var"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"for (var i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100);\n}\n// Output: 3, 3, 3\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Soluci\xf3n con ",(0,r.jsx)(n.code,{children:"let"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:"showLineNumbers",children:"for (let i = 0; i < 3; i++) {\n  setTimeout(() => console.log(i), 100);\n}\n// Output: 0, 1, 2\n"})}),"\n",(0,r.jsx)(n.h2,{id:"buenas-pr\xe1cticas-recomendadas",children:"Buenas pr\xe1cticas recomendadas"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Principio"}),(0,r.jsx)(n.th,{children:"Aplicaci\xf3n"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Clean Code"})}),(0,r.jsxs)(n.td,{children:["Se favorece la ",(0,r.jsx)(n.strong,{children:"inmutabilidad"})," (",(0,r.jsx)(n.code,{children:"const"}),") y nombres con significado. Evita errores silenciosos con ",(0,r.jsx)(n.code,{children:"var"}),"."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"SOLID"})}),(0,r.jsx)(n.td,{children:"Favorece el principio de responsabilidad \xfanica: las variables solo contienen lo necesario y no cambian su prop\xf3sito."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:(0,r.jsx)(n.strong,{children:"Clean Architecture"})}),(0,r.jsx)(n.td,{children:"Al limitar el \xe1mbito, se favorece el encapsulamiento dentro de cada m\xf3dulo o capa de la aplicaci\xf3n."})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Flanagan, D. (2020). JavaScript: The Definitive Guide (7th ed.). O'Reilly Media."}),"\n",(0,r.jsx)(n.li,{children:"Crockford, D. (2008). JavaScript: The Good Parts. O\u2019Reilly Media."}),"\n",(0,r.jsxs)(n.li,{children:["Mozilla Developer Network. (s.f.). ",(0,r.jsx)(n.a,{href:"https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Statements/let",children:"let, const, var"})]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/",children:"TypeScript Handbook"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://google.github.io/styleguide/jsguide.html",children:"JavaScript Style Guide"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>o});var s=i(6540);const r={},c=s.createContext(r);function a(e){const n=s.useContext(c);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(c.Provider,{value:n},e.children)}}}]);