"use strict";(self.webpackChunkjs_and_ts_in_depth_elective=self.webpackChunkjs_and_ts_in_depth_elective||[]).push([[2872],{1129:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"typescript_fundamentals/union_types","title":"Union types (|)","description":"Un union type describe un valor que puede ser uno entre varios tipos posibles. Por ejemplo: string | number significa \\"string o number\\"","source":"@site/docs/02_typescript_fundamentals/06_union_types.md","sourceDirName":"02_typescript_fundamentals","slug":"/typescript_fundamentals/union_types","permalink":"/JS_and_TS_In-depth_Elective/docs/typescript_fundamentals/union_types","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/02_typescript_fundamentals/06_union_types.md","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"tutorialSidebar","previous":{"title":"Diferencias entre type e interface","permalink":"/JS_and_TS_In-depth_Elective/docs/typescript_fundamentals/differences_between_type_and_interface"},"next":{"title":"Intersection types (&)","permalink":"/JS_and_TS_In-depth_Elective/docs/typescript_fundamentals/intersection_types"}}');var r=s(4848),a=s(8453);const o={sidebar_position:6},t="Union types (|)",d={},l=[{value:"Uniones con literales",id:"uniones-con-literales",level:2},{value:"Narrowing",id:"narrowing",level:2},{value:"Uni\xf3n discriminada",id:"uni\xf3n-discriminada",level:2},{value:"Union vs opcional vs undefined",id:"union-vs-opcional-vs-undefined",level:2},{value:"Union en funciones: par\xe1metros y retorno",id:"union-en-funciones-par\xe1metros-y-retorno",level:2},{value:"Uniones de objetos",id:"uniones-de-objetos",level:2},{value:"Resultados tipados (Result/Either) con unions",id:"resultados-tipados-resulteither-con-unions",level:2},{value:"Arrays con union",id:"arrays-con-union",level:2},{value:"Preservar literales con <code>as const</code>",id:"preservar-literales-con-as-const",level:2},{value:"Narrowing de union",id:"narrowing-de-union",level:2},{value:"Uni\xf3n discriminada en un caso de uso",id:"uni\xf3n-discriminada-en-un-caso-de-uso",level:2},{value:"Principios aplicados",id:"principios-aplicados",level:2},{value:"Referencias",id:"referencias",level:2}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"union-types-",children:"Union types (|)"})}),"\n",(0,r.jsxs)(n.p,{children:["Un ",(0,r.jsx)(n.strong,{children:"union type"})," describe un valor que puede ser uno entre varios tipos posibles. Por ejemplo: ",(0,r.jsx)(n.code,{children:"string | number"}),' significa "string o number"']}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"let id: string | number;\nid = 'u-123';\nid = 42; // ambas v\xe1lidas\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Los unions capturan ",(0,r.jsx)(n.strong,{children:"alternativas"})," del dominio (estados, modos, resultados) de forma ",(0,r.jsx)(n.strong,{children:"expl\xedcita"})," y ",(0,r.jsx)(n.strong,{children:"verificable"})," por el compilador."]}),"\n",(0,r.jsx)(n.h2,{id:"uniones-con-literales",children:"Uniones con literales"}),"\n",(0,r.jsxs)(n.p,{children:["Los literales de tipo (cadenas, n\xfameros o booleans concretos) permiten modelar ",(0,r.jsx)(n.strong,{children:"estados finitos"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type OrderStatus = 'PENDING' | 'PAID' | 'CANCELLED';\n\nfunction canShip(status: OrderStatus): boolean {\n  return status === 'PAID';\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"El modelado expresivo ofrece:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:'Claridad de negocio: evita string "m\xe1gicos".'}),"\n",(0,r.jsxs)(n.li,{children:["El compilador ",(0,r.jsx)(n.strong,{children:"restringe"})," los valores a la enumeraci\xf3n declarada."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"narrowing",children:"Narrowing"}),"\n",(0,r.jsxs)(n.p,{children:["Dado que una union puede ser varias cosas, YS requiere ",(0,r.jsx)(n.strong,{children:"refinar"})," (narrow) el tipo antes de usar APIs espec\xedficas. Dentro del narrowing tenemos formas tales como:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"typeof"})," (primitivos)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"function formatId(id: string | number) {\n  return typeof id === 'number' ? `#${id}` : id.toUpperCase();\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"instanceof"})," (clases)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"function serializeDate(x: Date | string) {\n  return x instanceof Date ? x.toISOString() : new Date(x).toISOString();\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"in"})," (propiedad en objeto)"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type Dog = { kind: 'dog'; bark: () => void };\ntype Cat = { kind: 'cat'; meow: () => void };\n\nfunction speak(pet: Dog | Cat) {\n  if ('bark' in pet) pet.bark();\n  else pet.meow();\n}\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Type guards personalizados"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type User = { id: string; name: string };\ntype Guest = { token: string };\n\nfunction isUser(x: User | Guest): x is User {\n  return (x as User).id !== undefined;\n}\n\nfunction greet(x: User | Guest) {\n  if (isUser(x)) console.log(`Hello, ${x.name}`);\n  else console.log(`Hello, guest with token ${x.token}`);\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"uni\xf3n-discriminada",children:"Uni\xf3n discriminada"}),"\n",(0,r.jsxs)(n.p,{children:["Es recomendable aplicar este patr\xf3n, agregando un ",(0,r.jsx)(n.strong,{children:"discriminante"})," com\xfan (",(0,r.jsx)(n.code,{children:"kind"}),", ",(0,r.jsx)(n.code,{children:"type"}),", etc.). Permite ",(0,r.jsx)(n.code,{children:"switch"})," exhaustivo con ",(0,r.jsx)(n.code,{children:"never"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type Payment =\n  | { kind: 'card'; last4: string }\n  | { kind: 'cash'; change: number }\n  | { kind: 'transfer'; bank: string };\n\nfunction renderPayment(p: Payment): string {\n  switch (p.kind) {\n    case 'card': return `Card \u2022\u2022\u2022\u2022 ${p.last4}`;\n    case 'cash': return `Cash (change: ${p.change})`;\n    case 'transfer': return `Transfer (${p.bank})`;\n    default: {\n      const _exhaustive: never = p; // fuerza exhaustividad\n      return _exhaustive;\n    }\n  }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Beneficio: Si agregar una nueva variante y olvidas manejarla, el compilador te avisar\xe1."}),"\n",(0,r.jsx)(n.h2,{id:"union-vs-opcional-vs-undefined",children:"Union vs opcional vs undefined"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"name?: string"})," \u2248 ",(0,r.jsx)(n.code,{children:"name: string | undefined"})," (para propiedades)."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Par\xe1metros opcionales (",(0,r.jsx)(n.code,{children:"param?: T"}),") implican ",(0,r.jsx)(n.code,{children:"T | undefined"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Usa ",(0,r.jsx)(n.code,{children:"??"})," (nullish coalescing) cuando quieras default solo para ",(0,r.jsx)(n.code,{children:"null | undefined"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"function display(title?: string) {\n  const safe = title ?? '(no title)'; // respeta \"\" como valor v\xe1lido\n  return safe;\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"union-en-funciones-par\xe1metros-y-retorno",children:"Union en funciones: par\xe1metros y retorno"}),"\n",(0,r.jsx)(n.p,{children:"Un solo contrato con union (en vez de muchos overloads):"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type Input = string | URL;\n\nexport function toURL(x: Input): URL {\n  return typeof x === 'string' ? new URL(x) : x;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Usa overloads solo si ",(0,r.jsx)(n.strong,{children:"el tipo de retorno cambia"})," de forma no expresable con un union simple."]}),"\n",(0,r.jsx)(n.h2,{id:"uniones-de-objetos",children:"Uniones de objetos"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uni\xf3n de formas:"})," cada variante tiene ",(0,r.jsx)(n.strong,{children:"campos distintos"})," y sem\xe1ntica propia."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Objeto con opcionales:"})," una ",(0,r.jsx)(n.strong,{children:"misma forma"})," con campos que ",(0,r.jsx)(n.strong,{children:"pueden faltar"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Cuando las ramas tienen ",(0,r.jsx)(n.strong,{children:"l\xf3gica diferente"}),", elige ",(0,r.jsx)(n.strong,{children:"uni\xf3n discriminada"}),". Cuando es un \xfanico \u201cshape\u201d con campos no requeridos, usa ",(0,r.jsx)(n.strong,{children:"opcionales"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"resultados-tipados-resulteither-con-unions",children:"Resultados tipados (Result/Either) con unions"}),"\n",(0,r.jsx)(n.p,{children:"Modelar \xe9xitos y fallos sin excepciones:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type Ok<T> = { kind: 'ok'; value: T };\ntype Fail<E> = { kind: 'error'; error: E };\ntype Result<T, E = Error> = Ok<T> | Fail<E>;\n\nconst ok = <T>(value: T): Ok<T> => ({ kind: 'ok', value });\nconst fail = <E>(error: E): Fail<E> => ({ kind: 'error', error });\n\nasync function fetchUser(id: string): Promise<Result<{ id: string; name: string }>> {\n  try {\n    const res = await fetch(`/api/users/${id}`);\n    if (!res.ok) return fail(new Error('HTTP error'));\n    return ok(await res.json());\n  } catch (e) {\n    return fail(e as Error);\n  }\n}\n\nasync function main() {\n  const r = await fetchUser('u1');\n  if (r.kind === 'ok') console.log(r.value.name);\n  else console.error(r.error.message);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"arrays-con-union",children:"Arrays con union"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Array de uni\xf3n:"})," ",(0,r.jsx)(n.code,{children:"(A | B)[]"}),": cada elemento puede ser ",(0,r.jsx)(n.code,{children:"A"})," o ",(0,r.jsx)(n.code,{children:"B"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Uni\xf3n de arrays:"})," ",(0,r.jsx)(n.code,{children:"A[] | B[]"}),": todo el array es solo ",(0,r.jsx)(n.code,{children:"A[]"})," o solo ",(0,r.jsx)(n.code,{children:"B[]"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Por ejemplo:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"type A = { a: number };\ntype B = { b: string };\n\nconst x: Array<A | B> = [{ a: 1 }, { b: 'x' }]; // mezcla\nconst y: A[] | B[] = Math.random() > 0.5 ? [{ a: 1 }] : [{ b: 'x' }]; // todo A[] o todo B[]\n"})}),"\n",(0,r.jsxs)(n.h2,{id:"preservar-literales-con-as-const",children:["Preservar literales con ",(0,r.jsx)(n.code,{children:"as const"})]}),"\n",(0,r.jsx)(n.p,{children:"\xdatil para discriminantes y colecciones inmutables:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",metastring:"showLineNumbers",children:"const STATUS = ['PENDING', 'PAID', 'CANCELLED'] as const;\ntype Status = typeof STATUS[number]; // 'PENDING' | 'PAID' | 'CANCELLED'\n"})}),"\n",(0,r.jsx)(n.h2,{id:"narrowing-de-union",children:"Narrowing de union"}),"\n",(0,r.jsx)(n.mermaid,{value:'flowchart TD\n  A["Valor con tipo A|B|C"] --\x3e B{"\xbftypeof/instanceof/in?"}\n  B -- S\xed --\x3e C["Refina a A o B o C"]\n  B -- No --\x3e D["No usar APIs espec\xedficas"]\n  C --\x3e E{\xbfSwitch discriminado?}\n  E -- S\xed --\x3e F["Manejo exhaustivo"]\n  E -- No --\x3e G["Narrow adicional o error"]'}),"\n",(0,r.jsx)(n.h2,{id:"uni\xf3n-discriminada-en-un-caso-de-uso",children:"Uni\xf3n discriminada en un caso de uso"}),"\n",(0,r.jsx)(n.mermaid,{value:"sequenceDiagram\n  autonumber\n  participant App\n  participant UseCase as PayOrder.execute\n  participant Result as Result<'ok'|'invalid-state'|'not-found'>\n\n  App->>UseCase: execute(orderId)\n  UseCase--\x3e>Result: { kind: 'ok' } | { kind: 'invalid-state' } | { kind: 'not-found' }\n  App->>App: switch(result.kind) // exhaustivo\n  App--\x3e>App: act\xfaa seg\xfan la variante (UI/HTTP/Log)"}),"\n",(0,r.jsx)(n.h2,{id:"principios-aplicados",children:"Principios aplicados"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean Code:"})," los unions con literales reemplazan cadenas m\xe1gicas y any. switch exhaustivo evita ramas olvidadas."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SOLID:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SRP:"})," cada variante encapsula una responsabilidad/estado."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"OCP:"})," agregar una nueva variante no rompe las existentes (si hay exhaustividad, el compilador gu\xeda)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"DIP:"})," orquestas contra contratos (unions + interfaces), no implementaciones."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Clean Architecture:"})," uniones discriminadas para resultados de casos de uso y eventos de dominio (claras, testeables, estables)."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"referencias",children:"Referencias"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Microsoft. (s.f.). ",(0,r.jsx)(n.a,{href:"https://www.typescriptlang.org/docs/",children:"TypeScript Handbook: Unions and Narrowing"}),"."]}),"\n",(0,r.jsx)(n.li,{children:"Vanderkam, D. (2019). Effective TypeScript: 62 Specific Ways to Improve Your TypeScript. O\u2019Reilly Media."}),"\n",(0,r.jsx)(n.li,{children:"Flanagan, D. (2020). JavaScript: The Definitive Guide (7.\xaa ed.). O\u2019Reilly Media."}),"\n",(0,r.jsx)(n.li,{children:"Zakas, N. C. (2012). Maintainable JavaScript: Writing Readable Code. O\u2019Reilly Media."}),"\n",(0,r.jsxs)(n.li,{children:["Google. (s.f.). ",(0,r.jsx)(n.a,{href:"https://google.github.io/styleguide/jsguide.html",children:"JavaScript Style Guide"}),"."]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>t});var i=s(6540);const r={},a=i.createContext(r);function o(e){const n=i.useContext(a);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);